require File.join(File.dirname(__FILE__), 'jisx0208')

jis_uni_pairs = []

JIS_HEADER = <<END_JIS_HEADER
TYPE		ROWCOL
NAME		ISO-2022-JP-KDDI/UCS
SRC_ZONE	0x21-0x7E / 0x21-0x7E / 8
OOB_MODE	ILSEQ
DST_ILSEQ	0xFFFE
DST_UNIT_BITS	16
END_JIS_HEADER

UCS_JIS_MAP = [ [0xE468..0xE5B4, 0x7521],
                [0xE5B5..0xE5DF, 0x7867],
                [0xEA80..0xEAFA, 0x7934],
                [0xEAFB..0xEB0D, 0x7854],
                [0xEB0E..0xEB8E, 0x7A51] ]

SJIS_HEADER = <<END_JIS_HEADER
TYPE		ROWCOL
NAME		Shift_JIS-KDDI/UCS
SRC_ZONE	0xF3-0xFC / 0xFC-0xFC / 8
OOB_MODE	ILSEQ
DST_ILSEQ	0xFFFE
DST_UNIT_BITS	16
END_JIS_HEADER

UCS_SJIS_MAP = [ [0xE468..0xE5B4, 0xF640],
                 [0xE5B5..0xE5CC, 0xF7E5],
                 [0xE5CD..0xE5DF, 0xF340],
                 [0xEA80..0xEAFA, 0xF353],
                 [0xEAFB..0xEB0D, 0xF7D2],
                 [0xEB0E..0xEB8E, 0xF3CF] ]

def make_pairs(code_map, new_method, to_method)
  pairs = code_map.inject([]) {|acc, (uni_range, head_code)|
    rc = JISX0208::Char.__send__(new_method, head_code)
    acc += uni_range.map{|uni| pair = [rc.__send__(to_method), uni]; rc = rc.succ; next pair }
  }
end

def output_map(io, header, code_map, new_method, to_method)
  pairs = make_pairs(code_map, new_method, to_method)
  pairs.sort_by!{|x, y| x }
  io.print "# DO NOT EDIT THIS FILE DIRECTLY\n\n"
  io.print header
  io.puts "\nBEGIN_MAP"
  pairs.each do |pair|
    io.puts "0x%04X = 0x%04X" % pair
  end
  io.puts "END_MAP"
end

File.open('ISO-2022-JP-KDDI%UCS.src', 'w') do |io|
  output_map(io, JIS_HEADER, UCS_JIS_MAP, :new, :to_int)
end

File.open('Shift_JIS-KDDI%UCS.src', 'w') do |io|
  output_map(io, SJIS_HEADER, UCS_SJIS_MAP, :from_sjis, :to_sjis)
end
